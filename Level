package parkinglot;

import vehicletype.Vehicle;
import vehicletype.VehicleType;

import java.util.ArrayList;
import java.util.List;

class Level {
    private final int floor;
    private final List<ParkingSpot> parkingSpots;

    public Level(int floor,int numSpots){
        this.floor = floor;
        parkingSpots = new ArrayList<>();

        double spotsForBikes = 0.50;
        double spotsForCars = 0.40;

        int numOfBikes = (int)(numSpots*spotsForBikes);
        int numOfCars = (int)(numSpots*spotsForCars);

        for (int i=1;i<=numOfBikes;i++){
            parkingSpots.add(new ParkingSpot(i, VehicleType.MOTORBIKE));
        }
        for (int i=numOfBikes+1;i<=numOfBikes+numOfCars;i++){
            parkingSpots.add(new ParkingSpot(i,VehicleType.CAR));
        }
        for (int i=numOfBikes+numOfCars+1;i<=numSpots;i++){
            parkingSpots.add(new ParkingSpot(i,VehicleType.TRUCK));
        }
    }

    public synchronized boolean parkVehicle(Vehicle vehicle){
        for (ParkingSpot spot : parkingSpots){
            if (spot.isAvailable() && spot.getVehicleType()==vehicle.getVehicleType()){
                spot.parkVehicle(vehicle);
                return true;
            }
        }
        return false;
    }

    public synchronized boolean unParkVehicle(Vehicle vehicle){
        for (ParkingSpot spot : parkingSpots){
            if (!spot.isAvailable() && spot.getParked().equals(vehicle)){
                spot.unParkVehicle();
                return true;
            }
        }
        return false;
    }

    public void displayAvailability(){
        System.out.println("Floor "+floor+" Availability ");
        for (ParkingSpot spot : parkingSpots){
            System.out.println("Spot "+spot.getSpotNumber()+": "+((spot.isAvailable())?"Available For":"Occupied By")+" "+spot.getVehicleType());
        }
    }

    public List<ParkingSpot> getParkingSpots() {
        return parkingSpots;
    }
}
